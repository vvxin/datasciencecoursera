head(diamonds)
qplot(carat,price,data=dsmall,colour=cut)
qplot(carat,price,data=dsmall,shape=cut)
qplot(carat,price,data=dsmall,shape=table)
qplot(carat,price,data=dsmall,shape=clarity)
qplot(carat,price,data=dsmall,colour=clarity)
qplot(carat,price,data=dsmall,colour=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,alpha=I(1/10))
qplot(carat,price,data=diamonds,alpha=I(1/100))
qplot(carat,data=dsmall)
qplot(carat,price,data=dsmall,facet=cut)
qplot(carat,price,data=dsmall,geom="density")
qplot(carat,data=dsmall,geom="density")
qplot(carat,data=diamonds,geom="density")
qplot(carat,data=diamonds,geom="density",colour=color)
qplot(carat,data=diamonds,geom="density",colour=cut)
qplot(carat,data=diamonds,geom="density",fill=color)
qplot(carat,data=diamonds,geom="histogram",fill=color)
qplot(carat,data=diamonds,geom="histogram",fill=cut)
qplot(color,price/carat,data=diamonds,geom="jitter")
qplot(cut,price/carat,data=diamonds,geom="jitter")
qplot(cut,price/carat,data=diamonds,geom="boxplot")
qplot(cut,price/carat,data=diamonds,geom="jitter",alpha=I(1/100))
qplot(cut,price/carat,data=diamonds,geom="jitter")
qplot(cut,price/carat,data=diamonds,geom="jitter",coulor=color)
qplot(cut,price/carat,data=diamonds,geom="jitter",colour=color)
qplot(cut,price/carat,data=diamonds,geom="jitter",shape=color)
qplot(cut,price/carat,data=diamonds,geom="jitter",colour=color)
head(economics)
tail(economics)
qplot(date,unemploy/pop,data=ecnomics)
qplot(date,unemploy/pop,data=economics)
qplot(date,unemploy/pop,data=economics,geom=c("point","line"))
qplot(date,unemploy/pop,data=economics,geom="line"
)
qplot(date,unemploy/pop,data=economics,geom="line")
qplot(date,unemploy/pop,data=economics,geom="line",colour=year(date))
qplot(cut,price/carat,data=diamonds,geom="jitter",colour=color)
qplot(cut,price/carat,data=diamonds,geom="jitter",shape=color)
qplot(cut,price/carat,data=diamonds,geom="jitter")
mpg
head(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,colour=factor(cyl))
qplot(displ,hwy,data=mpg,colour=factor(cyl),size=8)
qplot(displ,hwy,data=mpg,colour=factor(cyl),size=20)
qplot(displ,hwy,data=mpg,colour=factor(cyl),size=1)
qplot(displ,hwy,data=mpg,colour=factor(cyl))
qplot(displ,hwy,data=mpg,colour=factor(cyl),shape=class)
qplot(displ,hwy,data=mpg,colour=factor(cyl),shape=year)
qplot(displ,hwy,data=mpg,colour=factor(cyl),shape=factor(year)
)
library(openair)
aoti2014 <- import(file=file.choose(), date.format="%Y-%m-%d %H:%M")
aoti2014 <- import(file=file.choose(), date.format="%Y/%m/%d %H:%M")
summary(aoti2014)
tail
tail(aoti2014)
timeVariation(aoti2014,pollutant="rn")
plot(aoti2014)
timeVariation(aoti2014,pollutant="rn")
plot(aoti2014$rn)
timePlot(aoti2014,pollutant="rn")
timePlot(aoti2014,pollutant="rn",avg.time=day)
timePlot(aoti2014,pollutant="rn",avg.time="day")
summary(aoti2014)
summaryPlot(aoti2014)
date2014 <- seq(from=as.Date("2014-01-01 00:00:00"),to=as.Date("2014-12-31 23:00:00"),by=1)
head(date2014)
summary(date2014)
date2014 <- seq(from=as.Date("2014-01-01 00:00:00"),to=as.Date("2014-12-31 23:00:00"),by=1)
?seq
date2014 <- seq(from=as.Date("2014-01-01 00:00:00"),to=as.Date("2014-12-31 23:00:00"),by="1 hour")
date2014 <- seq(from=as.Date("2014-01-01 00:00:00"),to=as.Date("2014-12-31 23:00:00"),by="1 hour")
library(zoo)
date2014 <- seq(from=as.Date("2014-01-01 00:00:00"),to=as.Date("2014-12-31 23:00:00"),by="1 hour")
qplot
library(ggplot2)
qplot
qplot(rn,date,data=aoti2014)
qplot(date,rn,data=aoti2014)
qplot(date,rn,data=aoti2014,geom=c("point","smooth"))
stat_summary(aoti2014)
qplot(date,rn,data=aoti2014,geom="line"
)
version()
library(forecast)
install.packages(forecast)
install.packages("forecast")
update()
installr
installed.packages()
available.packages()
library(KernSmooth)
help(KernSmooth)
??KernSmooth
Sys.Date()
date()
getwd()
rm(list = ls())
library(datasets)
?iris
data(iris)
head(iris)
length(iris)
nrow(iris)
iris[iris$Species="virginica"]
iris[iris$Species=="virginica"]
iris[1]
iris
iris[11:150]
iris[101:150]
iris(101:150)
subset(iris,Species="virginica")
subset(iris,Species=="virginica")
subset(iris,Species=="virginica")$Sepal.Length
mean(subset(iris,Species=="virginica")$Sepal.Length)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
data(mtcars)
summary(mtcars)
head(mtcars)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
?abs
with(mtcars, tapply(hp, cyl, mean))
a <- with(mtcars, tapply(hp, cyl, mean))
a[1]
abs(a[1]-a[3])
debug(ls)
ls()
ls()
ls()
4
45
debug()
?debug
q
quit
q
4
1
q
?swirl
undebug
q
library(showtext)
font.files()
font.families()
font.families.google()
plot(1)
title(main = "中国")
showtext.begin()
title(main = "中国")
title(main = "中国beijing")
?font.add
library(showtext)
## Loading Google fonts (http://www.google.com/fonts)
font.add.google("Gochi Hand", "gochi")
font.add.google("Schoolbell", "bell")
font.add.google("Covered By Your Grace", "grace")
font.add.google("Rock Salt", "rock")
## Automatically use showtext to render text for future devices
showtext.auto()
## Tell showtext the resolution of the device,
## only needed for bitmap graphics. Default is 96
## showtext.opts(dpi = 96)
set.seed(123)
x = rnorm(10)
y = 1 + x + rnorm(10, sd = 0.2)
y[1] = 5
mod = lm(y ~ x)
## Plotting functions as usual
## Open a graphics device if you want, e.g.
## png("demo.png", 700, 600, res = 96)
op = par(cex.lab = 2, cex.axis = 1.5, cex.main = 2)
plot(x, y, pch = 16, col = "steelblue",
xlab = "X variable", ylab = "Y variable", family = "gochi")
grid()
title("Draw Plots Before You Fit A Regression", family = "bell")
text(-0.5, 4.5, "This is the outlier", cex = 2, col = "steelblue",
family = "grace")
abline(coef(mod))
abline(1, 1, col = "red")
par(family = "rock")
text(1, 1, expression(paste("True model: ", y == x + 1)),
cex = 1.5, col = "red", srt = 20)
text(0, 2, expression(paste("OLS: ", hat(y) == 0.79 * x + 1.49)),
cex = 1.5, srt = 15)
legend("topright", legend = c("Truth", "OLS"), col = c("red", "black"), lty = 1)
par(op)
font.families()
plot(cars, main = "中文标题", family = "Kai")
showtext.end()
font.families()
plot(cars, main = "中文标题", family = "wqy-microhei")
plot(cars)
warning()
warning()
plot(cars)
plot(airquality)
ggsave
library(ggplot2)
?ggsave
plot(car,main = "中文")
plot(1,main = "中文")
plot(1,main = "中文",family="kai")
warnings()
plot(1,main = "中文",family="wqy-simhei")
plot(1,main = "中文",family="wqy-microhei")
plot(1,main = "abcing",family="wqy-microhei")
plot(1,main = "abcing")
warnings()
plot(1,main = "abcing")
plot(1,main = "abcing",family="mono")
plot(1,main = "abcing")
plot(1,main = "abcing",family="mono")
Sys.getlocale()
?Sys.getlocale
?Sys.getlocale
library(showtext)
font.families()
plot(1,main = "abcing",family="mono")
plot(1,main = "abcing",family="sans")
plot(1,main = "abcing",family="sserif")
plot(1,main = "abcing",family="serif")
plot(1,main = "abcing",family="serif")
plot(1,main = "abcing",family="wqy-microhei")
warnings()
showtext.begin()
plot(1,main = "abcing",family="wqy-microhei")
plot(1,main = "abcing",family="mono")
showtext.end()
plot(1)
title(main = "abjing",family="mono")
Sys.getenv()
Sys.setenv()
?Sys.setlocale
reload
plot(1)
title(main = "中")
title(main = "中",family="wqy-microhei")
showtext.begin()
title(main = "中",family="wqy-microhei")
showtext.end()
showtext.end()
Sys.getlocale()
Sys.timezone()
Sys.getlocale(category = "LC_CTYPE")
Sys.getlocale(category = "LC_ALL")
Sys.getlocale(category = "LC_TIME")
Sys.getlocale(category = "LC_COLLATE")
warnings()
Sys.getlocale(category = "LC_COLLATE")
Sys.getlocale(category = "LC_MONETARY")
Sys.getlocale(category = "LC_NUMERIC")
font.files()
font.add("songti","Songti.ttc")
font.families()
plot(1)
title(main = "是",family="songti")
showtext.begin()
showtext.begin()
title(main = "是",family="songti")
title(main = "是",family="songti")
title(main = "是",family="songti")
warnings()
font.add("songti","Songtis.ttc")
showtext.end()
Sys.setenv()
Sys.getenv()
library(showtext)
## Loading Google fonts (http://www.google.com/fonts)
font.add.google("Gochi Hand", "gochi")
font.add.google("Schoolbell", "bell")
font.add.google("Covered By Your Grace", "grace")
font.add.google("Rock Salt", "rock")
## Automatically use showtext to render text for future devices
showtext.auto()
## Tell showtext the resolution of the device,
## only needed for bitmap graphics. Default is 96
## showtext.opts(dpi = 96)
set.seed(123)
x = rnorm(10)
y = 1 + x + rnorm(10, sd = 0.2)
y[1] = 5
mod = lm(y ~ x)
## Plotting functions as usual
## Open a graphics device if you want, e.g.
## png("demo.png", 700, 600, res = 96)
op = par(cex.lab = 2, cex.axis = 1.5, cex.main = 2)
plot(x, y, pch = 16, col = "steelblue",
xlab = "X variable", ylab = "Y variable", family = "gochi")
grid()
title("Draw Plots Before You Fit A Regression", family = "bell")
text(-0.5, 4.5, "This is the outlier", cex = 2, col = "steelblue",
family = "grace")
abline(coef(mod))
abline(1, 1, col = "red")
par(family = "rock")
text(1, 1, expression(paste("True model: ", y == x + 1)),
cex = 1.5, col = "red", srt = 20)
text(0, 2, expression(paste("OLS: ", hat(y) == 0.79 * x + 1.49)),
cex = 1.5, srt = 15)
legend("topright", legend = c("Truth", "OLS"), col = c("red", "black"), lty = 1)
par(op)
font.families()
warnings()
spng("demo.png", 700, 600, res = 96)
set.seed(123)
x = rnorm(10)
y = 1 + x + rnorm(10, sd = 0.2)
y[1] = 5
mod = lm(y ~ x)
op = par(cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
plot(x, y, pch = 16, col = "steelblue",
xlab = "X variable", ylab = "Y variable")
grid()
## Use showtext only for this part
showtext.begin()
title("Draw Plots Before You Fit A Regression", family = "bell")
showtext.end()
text(-0.5, 4.5, "This is the outlier", cex = 2, col = "steelblue")
abline(coef(mod))
abline(1, 1, col = "red")
text(1, 1, expression(paste("True model: ", y == x + 1)),
cex = 1.5, col = "red", srt = 20)
text(0, 2, expression(paste("OLS: ", hat(y) == 0.79 * x + 1.49)),
cex = 1.5, srt = 15)
legend("topright", legend = c("Truth", "OLS"), col = c("red", "black"), lty = 1)
par(op)
png("demo.png", 700, 600, res = 96)
set.seed(123)
x = rnorm(10)
y = 1 + x + rnorm(10, sd = 0.2)
y[1] = 5
mod = lm(y ~ x)
op = par(cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
plot(x, y, pch = 16, col = "steelblue",
xlab = "X variable", ylab = "Y variable")
grid()
## Use showtext only for this part
showtext.begin()
title("Draw Plots Before You Fit A Regression", family = "bell")
showtext.end()
text(-0.5, 4.5, "This is the outlier", cex = 2, col = "steelblue")
abline(coef(mod))
abline(1, 1, col = "red")
text(1, 1, expression(paste("True model: ", y == x + 1)),
cex = 1.5, col = "red", srt = 20)
text(0, 2, expression(paste("OLS: ", hat(y) == 0.79 * x + 1.49)),
cex = 1.5, srt = 15)
legend("topright", legend = c("Truth", "OLS"), col = c("red", "black"), lty = 1)
par(op)
getwd()
# Set ExData_Plotting1 repo directory as working directory
setwd("~/git/ExData_Plotting1")
##### LOAD DATA #####
# Read unzipped data file
fulldata <- read.table("household_power_consumption.txt",
sep = ";",
header = TRUE,
na.strings = "?")
# Convert the Date and Time variables to Date/Time classes
fulldata$Time <- strptime(with(fulldata,paste(Date, Time)), "%d/%m/%Y %H:%M:%S")
fulldata$Date <- as.Date(fulldata$Date, "%d/%m/%Y")
# Subset data from the dates 2007-02-01 and 2007-02-02
twoday <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
data <- subset(fulldata, fulldata$Date %in% twoday)
rm(fulldata)
# saveRDS(data,"twoday.RDS")
##### MAKE PLOT 2 #####
library(showtext)
showtext.begin()
png("plot2.png", width = 480, height = 480)
plot(data$Time, data$Global_active_power,
type = "l",
xlab = "",
ylab = "Global Active Power (kilowatts)")
showtext.end()
dev.off()
showtext.begin()
plot(data$Time, data$Global_active_power,
type = "l",
xlab = "",
ylab = "Global Active Power (kilowatts)")
showtext.begin()
png("plot4.png", width = 480, height = 480)
par(mfrow = c(2,2))
plot(data$Time, data$Global_active_power,
type = "l", xlab = "", ylab = "Global Active Power")
plot(data$Time, data$Voltage,
type = "l", xlab = "datetime", ylab = "Voltage")
plot(data$Time, data$Sub_metering_1,
type = "l", col = "black", xlab = "", ylab = "Energy sub metering")
lines(data$Time, data$Sub_metering_2, type = "l", col = "red")
lines(data$Time, data$Sub_metering_3, type = "l", col = "blue")
legend("topright", bty = "n",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col = c("black", "red", "blue"), lwd = 2)
plot(data$Time, data$Global_reactive_power,
type = "l", xlab = "datetime", ylab = "Global_reactive_power")
showtext.end()
dev.off()
showtext.begin()
png("plot3.png", width = 480, height = 480)
plot(data$Time, data$Sub_metering_1,
type = "l",
col = "black",
xlab = "",
ylab = "Energy sub metering")
lines(data$Time, data$Sub_metering_2,
type = "l",
col = "red")
lines(data$Time, data$Sub_metering_3,
type = "l",
col = "blue")
legend("topright",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lwd = 2,
col = c("black", "red", "blue"))
showtext.end()
dev.off()
dev.cur()
dev.cur()
?par
version
library(ggmap)
qmap("tiananmen",zoom=13)
qmap("tiananmen",zoom=13,source="osm")
qmap("tiananmen",zoom=6,source="osm")
qmap("tiananmen",zoom = 14, source = "stamen", maptype = "toner"))
qmap("tiananmen",zoom = 14, source = "stamen", maptype = "toner")
qmap("paris",zoom = 13, source = "stamen", maptype = "toner")
?qmap
qmap("paris",zoom = 12, source = "stamen", maptype = "watercolor")
qmap("beijing",zoom = 12, source = "stamen", maptype = "watercolor")
str(crime)
violent_crimes <- subset(crime,
+ offense != "auto theft" & offense != "theft" & offense != "burglary")
>
> # order violent crimes
> violent_crimes$offense <- factor(violent_crimes$offense,
+ levels = c("robbery", "aggravated assault", "rape", "murder"))
>
> # restrict to downtown
> violent_crimes <- subset(violent_crimes,
+ -95.39681 <= lon & lon <= -95.34188 &
+ 29.73631 <= lat & lat <= 29.78400)
str(crime)
library(lattice)
library(nlne)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
getwd()
fulldata <- read.table("household_power_consumption.txt",
sep = ";",
header = TRUE,
na.strings = "?")
# Convert the Date and Time variables to Date/Time classes
fulldata$Time <- strptime(with(fulldata,paste(Date, Time)), "%d/%m/%Y %H:%M:%S")
fulldata$Date <- as.Date(fulldata$Date, "%d/%m/%Y")
# Subset data from the dates 2007-02-01 and 2007-02-02
twoday <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
data <- subset(fulldata, fulldata$Date %in% twoday)
rm(fulldata)
plot(data$Time, data$Global_active_power,
type = "l",
xlab = "",
ylab = "Global Active Power (kilowatts)")
lang <- Sys.getlocale(category = "LC_TIME")
warning()
lang
Sys.setlocale("LC_TIME","English")
Sys.setlocale("LC_TIME","C")
plot(data$Time, data$Global_active_power,
type = "l",
xlab = "",
ylab = "Global Active Power (kilowatts)")
png("plot2_alt.png", width = 480, height = 480)
plot(data$Time, data$Global_active_power,
type = "l",
xlab = "",
ylab = "Global Active Power (kilowatts)")
dev.off()
Sys.setlocale("LC_TIME",lang) #restore language setting
?calendarHeat
??calendarHeat
?make.names
smoothScatter()
?smoothScatter
getwd()
setwd("/Users/simba/git/ExData_Plotting2/")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
head(NEI)
head(SCC)
names(SCC)
head(NEI)
?list
yearsum <- with(NEI, aggregate(Emissions, by = year, sum))
yearsum <- with(NEI, aggregate(Emissions, by = list(year), sum))
yearsum
plot(yearsum)
plot(1)
warning()
warning()
rm(list = ls())
